{"version":3,"sources":["components/Context.tsx","utils/fetchClient.ts","components/PostsList.tsx","api/api.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["Context","React","createContext","commentList","undefined","setCommentList","commentListError","setCommentListError","Provider","children","useState","contextValue","value","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","PostsList","postList","setSelectedPost","selectedPost","setOpenForm","useContext","className","map","post","id","title","type","classNames","onClick","userId","Comments","catch","Loader","NewCommentForm","inputName","setInputName","inputEmail","setInputEmail","inputText","setInputText","inputNameDagers","setInputNameDagers","inputEmailDagers","setInputEmailDagers","inputTextDagers","setInputTextDagers","clearInputs","useCallback","addComment","addCommentItem","Math","floor","random","postId","name","email","clickEnterInputs","e","code","preventDefault","clickAddButton","htmlFor","placeholder","onChange","target","onKeyDown","PostDetails","openForm","length","comment","href","deleteComments","filter","commentItem","UserSelector","setPostList","setUserSelect","userSelect","setPostListError","usersList","setUsersList","visibleList","setVisibleList","useEffect","users","role","user","posts","App","postListError","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ff4e24ac.chunk.js","sourcesContent":["import React, { useState, ReactNode } from 'react';\n\nimport { Comment } from '../types/Comment';\n\ntype ContextValue = {\n  commentList: Comment[] | undefined\n  setCommentList: React.Dispatch<React.SetStateAction<Comment[] | undefined>>\n\n  commentListError: boolean\n  setCommentListError: React.Dispatch<React.SetStateAction<boolean>>\n};\n\nexport const Context = React.createContext<ContextValue>({\n  commentList: undefined,\n  setCommentList: () => {},\n\n  commentListError: false,\n  setCommentListError: () => {},\n});\n\ntype Props = {\n  children: ReactNode\n};\n\nexport const Provider: React.FC<Props> = ({ children }) => {\n  // eslint-disable-next-line max-len\n  const [commentList, setCommentList] = useState<Comment[] | undefined>(undefined);\n  const [commentListError, setCommentListError] = useState<boolean>(false);\n\n  const contextValue:ContextValue = {\n    commentList,\n    setCommentList,\n\n    commentListError,\n    setCommentListError,\n  };\n\n  return (\n    <Context.Provider value={contextValue}>\n      {children}\n    </Context.Provider>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useContext } from 'react';\nimport classNames from 'classnames';\n\n// Types\n\nimport { Post } from '../types/Post';\n\nimport { Context } from './Context';\n\n// Api\n\nimport { getComments } from '../api';\n\ntype Props = {\n  postList: Post[] | undefined\n  setSelectedPost: (x: Post | null) => void\n  selectedPost: Post | null\n  setOpenForm: (x: boolean) => void\n};\n\nexport const PostsList: React.FC<Props> = ({\n  postList,\n  setSelectedPost,\n  selectedPost,\n  setOpenForm,\n}) => {\n  const { setCommentList, setCommentListError } = useContext(Context);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {postList && postList.map((post) => {\n            const { id, title } = post;\n\n            return (\n              <tr data-cy=\"Post\" key={id}>\n                <td data-cy=\"PostId\">{id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames(\n                      'button',\n                      'is-link',\n                      { 'is-light': !(selectedPost && selectedPost.id === id) },\n                    )}\n                    onClick={() => {\n                      setSelectedPost(post);\n                      setOpenForm(false);\n\n                      if ((selectedPost && selectedPost.id === id)) {\n                        setSelectedPost(null);\n\n                        return;\n                      }\n\n                      setCommentList(undefined);\n\n                      getComments(id)\n                        .then((Comments) => {\n                          setCommentList(Comments);\n                          setCommentListError(false);\n                        })\n                        .catch(() => {\n                          setCommentList([]);\n                          setCommentListError(true);\n                        });\n                    }}\n                  >\n                    {(selectedPost\n                      && (selectedPost.id === id) ? 'Close' : 'Open')}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import { client } from '../utils/fetchClient';\n\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (userId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${userId}`);\n};\n\nexport const addComments = (data: Comment) => {\n  return client.post<Comment[]>('/comments', data);\n};\n\nexport const deleteComments = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, {\n  useState,\n  KeyboardEvent,\n  MouseEvent,\n  useContext,\n  useCallback,\n} from 'react';\nimport classNames from 'classnames';\n\nimport { Post } from '../types/Post';\n\n// api\n\nimport { addComments } from '../api/api';\nimport { Context } from './Context';\n\ntype Props = {\n  selectedPost: Post\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPost,\n}) => {\n  const {\n    commentList,\n    setCommentList,\n    setCommentListError,\n  } = useContext(Context);\n\n  const [inputName, setInputName] = useState('');\n  const [inputEmail, setInputEmail] = useState('');\n  const [inputText, setInputText] = useState('');\n\n  // Dangers\n\n  const [inputNameDagers, setInputNameDagers] = useState(false);\n  const [inputEmailDagers, setInputEmailDagers] = useState(false);\n  const [inputTextDagers, setInputTextDagers] = useState(false);\n\n  // functions\n\n  const clearInputs = useCallback(() => {\n    setInputName('');\n    setInputEmail('');\n    setInputText('');\n  }, []);\n\n  const addComment = () => {\n    if (!inputName) {\n      setInputNameDagers(true);\n    }\n\n    if (!inputEmail) {\n      setInputEmailDagers(true);\n    }\n\n    if (!inputText) {\n      setInputTextDagers(true);\n    }\n\n    if (inputName && inputEmail && inputText) {\n      const randomId = Math.floor(Math.random() * 1000000);\n      const addCommentItem = {\n        id: randomId,\n        postId: selectedPost.id,\n        name: inputName,\n        email: inputEmail,\n        body: inputText,\n      };\n\n      addComments(addCommentItem)\n        .then(() => {\n          if (commentList) {\n            setCommentListError(false);\n            setCommentList([...commentList, addCommentItem]);\n            clearInputs();\n          }\n        })\n        .catch(() => {\n          setCommentListError(true);\n          clearInputs();\n        });\n    }\n  };\n\n  // eslint-disable-next-line max-len\n  const clickEnterInputs = useCallback((e: KeyboardEvent<HTMLInputElement> | KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.code === 'Enter') {\n      e.preventDefault();\n      addComment();\n    }\n  }, [inputName, inputEmail, inputText]);\n\n  const clickAddButton = useCallback((e: MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    addComment();\n  }, [inputName, inputEmail, inputText]);\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': inputNameDagers })}\n            value={inputName}\n            onChange={(e) => {\n              setInputName(e.target.value);\n              setInputNameDagers(false);\n            }}\n            onKeyDown={clickEnterInputs}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {inputNameDagers && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {inputNameDagers && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': inputEmailDagers })}\n            value={inputEmail}\n            onChange={(e) => {\n              setInputEmail(e.target.value);\n            }}\n            onKeyDown={clickEnterInputs}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {inputEmailDagers && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {inputEmailDagers && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('input', { 'is-danger': inputTextDagers })}\n            value={inputText}\n            onChange={(e) => {\n              setInputText(e.target.value);\n            }}\n            onKeyDown={clickEnterInputs}\n          />\n        </div>\n\n        {inputTextDagers && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': false },\n            )}\n            onClick={clickAddButton}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearInputs}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useContext } from 'react';\nimport classNames from 'classnames';\n\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\nimport { Post } from '../types/Post';\n\nimport { Context } from './Context';\n\nimport { deleteComments } from '../api/api';\n\ntype Props = {\n  selectedPost: Post\n  openForm: boolean\n  setOpenForm: (x: boolean) => void\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  openForm,\n  setOpenForm,\n}) => {\n  const { id, title, body } = selectedPost;\n  const {\n    commentList,\n    setCommentList,\n    commentListError,\n    setCommentListError,\n  } = useContext(Context);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {(!commentList && <Loader />)\n          || ((!commentListError && (\n            <>\n              {(commentList && commentList.length > 0)\n                ? (\n                  <>\n                    <p className=\"title is-4\">Comments:</p>\n                    {\n                      commentList?.map(comment => {\n                        const { name, email } = comment;\n\n                        return (\n                          <article\n                            className=\"message is-small\"\n                            data-cy=\"Comment\"\n                            key={comment.id}\n                          >\n                            <div className=\"message-header\">\n                              <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                                {name}\n                              </a>\n                              <button\n                                data-cy=\"CommentDelete\"\n                                type=\"button\"\n                                className=\"delete is-small\"\n                                aria-label=\"delete\"\n                                onClick={() => {\n                                  deleteComments(comment.id)\n                                    .then(() => {\n                                      setCommentList([\n                                        ...commentList.filter(commentItem => {\n                                          if (commentItem.id === comment.id) {\n                                            return false;\n                                          }\n\n                                          return true;\n                                        }),\n                                      ]);\n                                    })\n                                    .catch(() => {\n                                      setCommentListError(true);\n                                    });\n                                }}\n                              >\n                                delete button\n                              </button>\n                            </div>\n                            <div className=\"message-body\" data-cy=\"CommentBody\">\n                              {comment.body}\n                            </div>\n                          </article>\n                        );\n                      })\n                    }\n                  </>\n                )\n                : (\n                  <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                    No comments yet\n                  </p>\n                )}\n\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className={classNames(\n                  'button',\n                  'is-link',\n                  { 'is-hidden': openForm },\n                )}\n                onClick={() => {\n                  setOpenForm(true);\n                }}\n              >\n                Write a comment\n              </button>\n            </>\n          )) || (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          ))}\n        </div>\n\n        {openForm && (\n          <NewCommentForm\n            selectedPost={selectedPost}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\n\n// Api\nimport { getUsers, getPosts } from '../api';\n\n// Types\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  setPostList: (x: Post[] | undefined) => void\n  setUserSelect: (x: User | null) => void\n  userSelect: User | null\n  setPostListError: (x: boolean) => void\n  setOpenForm: (x: boolean) => void\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  setPostList,\n  setUserSelect,\n  userSelect,\n  setPostListError,\n  setOpenForm,\n}) => {\n  // State\n  const [usersList, setUsersList] = useState<User[]>([]);\n  const [visibleList, setVisibleList] = useState(false);\n\n  useEffect(() => {\n    getUsers().then((users) => {\n      setUsersList(users);\n    });\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => {\n            setVisibleList(!visibleList);\n          }}\n        >\n          <span>\n            {\n              userSelect\n                ? userSelect.name\n                : 'Choose a user'\n            }\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className={classNames('dropdown-menu', { 'is-hidden': !visibleList })}\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {usersList.map(user => {\n            const { id, name } = user;\n\n            return (\n              <a\n                href={`#user-${id}`}\n                className=\"dropdown-item\"\n                onClick={() => {\n                  setVisibleList(false);\n\n                  if (userSelect && userSelect.id === id) {\n                    return;\n                  }\n\n                  setUserSelect(user);\n                  setPostList(undefined);\n                  getPosts(id)\n                    .then((posts) => {\n                      setPostList(posts);\n                      setPostListError(false);\n                    }).catch(() => {\n                      setOpenForm(false);\n                      setPostList([]);\n                      setPostListError(true);\n                    });\n                }}\n                key={id}\n              >\n                {name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\n// Context\nimport { Provider } from './components/Context';\n\n// Types\n\nimport { Post } from './types/Post';\nimport { User } from './types/User';\n\nexport const App: React.FC = () => {\n  // State\n  const [postList, setPostList] = useState<Post[] | undefined>(undefined);\n  const [userSelect, setUserSelect] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [openForm, setOpenForm] = useState(false);\n\n  // Errors\n\n  const [postListError, setPostListError] = useState<boolean>(false);\n\n  return (\n    <Provider>\n      <main className=\"section\">\n        <div className=\"container\">\n          <div className=\"tile is-ancestor\">\n            <div className=\"tile is-parent\">\n              <div className=\"tile is-child box is-success\">\n                <div className=\"block\">\n                  <UserSelector\n                    setPostList={setPostList}\n                    setUserSelect={setUserSelect}\n                    userSelect={userSelect}\n                    setPostListError={setPostListError}\n                    setOpenForm={setOpenForm}\n                  />\n                </div>\n                <div className=\"block\" data-cy=\"MainContent\">\n                  {\n                    !userSelect\n                      ? (\n                        <p data-cy=\"NoSelectedUser\">\n                          No user selected\n                        </p>\n                      )\n                      : (!postList && <Loader />)\n                      || (((postList && postList.length !== 0) && (\n                        <PostsList\n                          postList={postList}\n                          selectedPost={selectedPost}\n                          setSelectedPost={setSelectedPost}\n                          setOpenForm={setOpenForm}\n                        />\n                      )) || (!postListError\n                        ? (\n                          <div\n                            className=\"notification is-warning\"\n                            data-cy=\"NoPostsYet\"\n                          >\n                            No posts yet\n                          </div>\n                        )\n                        : (\n                          <div\n                            className=\"notification is-danger\"\n                            data-cy=\"PostsLoadingError\"\n                          >\n                            Something went wrong!\n                          </div>\n                        )\n                      ))\n                  }\n                </div>\n              </div>\n            </div>\n            {selectedPost && (\n              <div\n                data-cy=\"Sidebar\"\n                className={classNames(\n                  'tile',\n                  'is-parent',\n                  'is-8-desktop',\n                  'Sidebar',\n                  'Sidebar--open',\n                )}\n              >\n                <div className=\"tile is-child box is-success \">\n                  <PostDetails\n                    selectedPost={selectedPost}\n                    openForm={openForm}\n                    setOpenForm={setOpenForm}\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </main>\n    </Provider>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}